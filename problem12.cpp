#include <iostream>
 
using namespace std;

/*
 * The sequence of triangle numbers is generated by adding the
 * natural numbers. So the 7th triangle number would
 * be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to
 * have over five divisors.
 *
 * What is the value of the first triangle number
 * to have over five hundred divisors?
 */

// Calculate the nth triangle number
long triangleNum(int n)
{
  return (n*(n+1))/2;
}

// Get number of divisors of number
int getNumOfDivisors(long long n)
{
  int count = 1;

  int i = 2;
  
  int factor_occurence = 0;

  // Prime factorize number and count occurences of each factor.
  // If n = (a^x)*(b^y)*(c^z) where a, b and c are prime,
  // then the number of divisors of n is (x+1)(y+1)(z+1).
  // See http://mathschallenge.net/library/number/number_of_divisors
  while(n != 1)
  {
    // If n is divisiblem increase factor_occurence count for that prime divisor
    if(n%i == 0)
    {
      n /= i;
      factor_occurence++;
    }
    else
    {
      // If we divided by all occurences of a prime factor, increment
      // count by one and multiply by total count
      if(factor_occurence > 0)
      {
        factor_occurence++;
        count *= factor_occurence;
      }

      factor_occurence = 0;

      // Try with next number
      i++;
    }

    // Account for final case
    if(n == 1)
    {
      if(factor_occurence > 0)
      {
        factor_occurence++;
        count *= factor_occurence;
      }
    }
  }

  return count;
}

int main()
{
  int i = 32;
  long long n;
  int d;

  do
  {
    n = triangleNum(i);
    d = getNumOfDivisors(n);

    if(d > 500)
    {
      cout << n;

      return 0;
    }

    i++;
  }
  while(d <= 500);

  return 0;
}
