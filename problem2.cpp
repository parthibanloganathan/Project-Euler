#include <iostream>
#include <cmath>
 
using namespace std;

/*
 * Each new term in the Fibonacci sequence is generated by adding
 * the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose
 * values do not exceed four million, find the sum
 * of the even-valued terms.
 */

// Golden ratio
const double PHI = (1 + sqrt(5))/2;
const double PSI = (1 - sqrt(5))/2;

// Returns nth Fibonacci number using the closed form expression
int getFibonacci(int n)
{
  if(n == 0)
  {
    return 0;
  }

  if(n == 1)
  {
    return 1;
  }

  // Return closed form result where n =
  return ( (pow(PHI, n) - pow(PSI, n)) / (sqrt(5)) );
}

int main()
{
  /* From
   * 0, 1, 1, 2, 3, 5, 8, 13, 21, 34..
   * it's evident that the 4th, 7th and 10th terms
   * are even. Every 3rd term is even after the 4th.
   * Using the closed form of the Fibonacci sequence,
   * the required sum can be computed.
   */

  int num = 0;
  int sum = 0;

  // i = 3, not 4 because of 0 index
  int i = 3;

  while((num = getFibonacci(i)) < 4000000)
  {
    sum += num;
    i += 3;
  }

  cout << sum;

  return 0;
}
